{"name":"SALib","tagline":"Sensitivity Analysis Library in Python (Numpy). Contains Sobol, Morris, and FAST methods.","body":"##Sensitivity Analysis Library (SALib)\r\n\r\nPython implementations of commonly used sensitivity analysis methods. Useful in systems modeling to calculate the effects of model inputs or exogenous factors on outputs of interest. \r\n\r\n**Requirements:** [NumPy](http://www.numpy.org/), [SciPy](http://www.scipy.org/)\r\n\r\n**Installation:** `pip install SALib` or `python setup.py install`\r\n\r\n**Methods included:**\r\n* Sobol Sensitivity Analysis ([Sobol 2001](http://www.sciencedirect.com/science/article/pii/S0378475400002706), [Saltelli 2002](http://www.sciencedirect.com/science/article/pii/S0010465502002801), [Saltelli et al. 2010](http://www.sciencedirect.com/science/article/pii/S0010465509003087))\r\n* Method of Morris ([Morris 1991](http://www.tandfonline.com/doi/abs/10.1080/00401706.1991.10484804), [Campolongo et al. 2007](http://www.sciencedirect.com/science/article/pii/S1364815206002805))\r\n* Fourier Amplitude Sensitivity Test (FAST) ([Cukier et al. 1973](http://scitation.aip.org/content/aip/journal/jcp/59/8/10.1063/1.1680571), [Saltelli et al. 1999](http://amstat.tandfonline.com/doi/abs/10.1080/00401706.1999.10485594))\r\n* Delta Moment-Independent Measure ([Borgonovo 2007](http://www.sciencedirect.com/science/article/pii/S0951832006000883), [Plischke et al. 2013](http://www.sciencedirect.com/science/article/pii/S0377221712008995))\r\n* Derivative-based Global Sensitivity Measure (DGSM) ([Sobol and Kucherenko 2009](http://www.sciencedirect.com/science/article/pii/S0378475409000354))\r\n* Metamodel-based Sobol Analysis (experimental). Uses RBF support vector regression from `scikit-learn`.\r\n\r\n**Contributors:** [Jon Herman](https://github.com/jdherman), [Matt Woodruff](https://github.com/matthewjwoodruff), [Chris Mutel](https://github.com/cmutel), [Fernando Rios](https://github.com/zoidy), [Dan Hyams](https://github.com/dhyams)\r\n\r\n### Create a parameter file\r\n\r\nTo get started, create a file describing the sampling ranges for the parameters in the model. Parameter files should be created with 3 columns: `[name, lower bound, upper bound]`:\r\n```\r\nP1 0.0 1.0\r\nP2 0.0 5.0\r\n...etc.\r\n```\r\n\r\nLines beginning with `#` will be treated as comments and ignored.\r\n\r\n### Generate samples\r\n\r\nFrom the command line:\r\n```\r\npython -m SALib.sample.saltelli \\\r\n     -n 1000 \\\r\n     -p ./SALib/test_functions/params/Ishigami.txt \\\r\n     -o model_input.txt \\\r\n```\r\n\r\nOther methods include `SALib.sample.morris_oat` and `SALib.sample.fast_sampler`. For an explanation of all command line options, [see the examples here](https://github.com/jdherman/SALib/tree/master/examples). \r\n\r\nOr, generate samples from Python:\r\n```python\r\nfrom SALib.sample import saltelli\r\nimport numpy as np\r\n\r\nparam_file = '../../SALib/test_functions/params/Ishigami.txt'\r\nparam_values = saltelli.sample(1000, param_file, calc_second_order = True)\r\nnp.savetxt('model_input.txt', param_values, delimiter=' ')\r\n```\r\n\r\nEither way, this will create a file of sampled input values in `model_input.txt`.\r\n\r\n### Run model\r\nHere's an example of running a test function in Python, but this will usually be a user-defined model, maybe even in another language. Just save the outputs.\r\n\r\n```python\r\nfrom SALib.test_functions import Ishigami\r\nY = Ishigami.evaluate(param_values)\r\nnp.savetxt('model_output.txt', Y, delimiter=' ')\r\n```\r\n\r\n### Analyze model output\r\n\r\nFrom the command line:\r\n```\r\npython -m SALib.analyze.sobol \\\r\n     -p ./SALib/test_functions/params/Ishigami.txt \\\r\n     -Y model_output.txt \\\r\n     -c 0 \\\r\n```\r\n\r\nThis will print indices and confidence intervals to the command line. You can redirect to a file using the `>` operator.\r\n\r\nOr, from Python:\r\n```python\r\nfrom SALib.analyze import sobol\r\nimport numpy as np\r\nSi = sobol.analyze(param_file, 'model_output.txt', column = 0, print_to_console=False)\r\n# Returns a dictionary with keys 'S1', 'S1_conf', 'ST', and 'ST_conf'\r\n# e.g. Si['S1'] contains the first-order index for each parameter, in the same order as the parameter file\r\n```\r\n\t  \r\nCheck out the [examples](https://github.com/jdherman/SALib/tree/master/examples) for a full description of command line and keyword options for all of the methods.\r\n\r\n\r\n### License\r\nCopyright (C) 2013-2014 Jon Herman and others. Licensed under the GNU Lesser General Public License.\r\n\r\nThe Sensitivity Analysis Library is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThe Sensitivity Analysis Library is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with the Sensitivity Analysis Library.  If not, see <http://www.gnu.org/licenses/>.","google":"UA-10257113-9","note":"Don't delete this file! It's used internally to help with page regeneration."}